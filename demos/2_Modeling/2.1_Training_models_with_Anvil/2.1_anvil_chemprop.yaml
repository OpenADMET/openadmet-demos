# Section specifying input data
data:
  # Specify where anvil will run (inputs, outputs, etc.)
  anvil_dir: demos/anvil_models/chemprop
  # Specify the dataset file
  resource: ../1.1_Curating_external_datasets/processed_data/processed_PXR_chembl.parquet
  # TODO: add description of intake
  type: intake
  # COMMENT ONCE WE KNOW WHAT THIS IS
  cat_entry: null
  # Specify input column containing SMILES
  input_col: OPENADMET_CANONICAL_SMILES
  # Specify each (1+) of the target columns
  target_cols:
  - OPENADMET_LOGAC50

# Additional metadata
metadata:
  authors: Cynthia Xu
  biotargets:
  - PXR
  build_number: 0
  description: basic regression using a ChemProp multitask task model
  driver: pytorch
  email: cynthia.xu@omsf.io
  name: chemprop_pchembl
  tag: chemprop-PXR-chembl
  tags:
  - openadmet
  - test
  - pchembl
  version: v1

# Section specifying training procedure
procedure:
  # Featurization specification
  feat:
    # Using the ChemPropFeaturizer (for ChemProp model)
    # See openadmet.models.features
    type: ChemPropFeaturizer
    # No parameters passed
    params: {}

  # Model specification
  model:
    # Indicate model type
    # See openadmet.models.architecture
    type: ChemPropMultiRegressorModel
    # Specify model parameters
    params:
      depth: 3
      ffn_hidden_dim: 1024
      ffn_hidden_num_layers: 1
      message_hidden_dim: 2048
      dropout: 0.2
      batch_norm: True
      messages: bond
      n_tasks: 1

  # Specify data splits
  split:
    # Specify how data will be split
    # See openadmet.models.split
    type: ShuffleSplitter
    # Specify split parameters
    params:
      random_state: 42
      train_size: 0.7
      val_size: 0.2 # For LGBM, set to 0
      test_size: 0.1

  # Specify training configuration
  train:
    # Specify the trainer, here LightningTrainer as ChemProp is a PyTorch Lightning model
    # See openadmet.models.trainer
    type: LightningTrainer
    # Specify model parameters
    params:
      accelerator: gpu
      early_stopping: true
      early_stopping_patience: 10
      max_epochs: 20
      monitor_metric: val_loss
      use_wandb: false
      # Don't blindly copy this over!
      wandb_project: demos

# Section specifying report generation
report:
  # Configure evaluation
  eval:
  # Generate regression metrics
  - type: RegressionMetrics
    params: {}
  # Generate regression plots
  - type: RegressionPlots
    params:
      axes_labels:
      - True pChEMBL
      - Predicted pChEMBL
      max_val: 10
      min_val: 3
      pXC50: true
      title: True vs Predicted pChEMBL on test set
  - type: PytorchLightningRepeatedKFoldCrossValidation
    params:
      axes_labels:
      - True pChEMBL
      - Predicted pChEMBL
      n_repeats: 2
      n_splits: 5
      pXC50: true
      random_state: 42
      title: True vs Predicted pChEMBL on test set
